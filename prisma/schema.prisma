generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  fullName      String   @map("full_name")
  email         String   @unique
  passwordHash  String   @map("password_hash")
  avatarUrl     String?  @map("avatar_url")
  phoneNumber   String?  @map("phone_number")
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  roles         UserRole[] // 1:N relationship with UserRole
  refreshTokens RefreshToken[] // 1:N relationship with RefreshToken

  @@map("users")
}

model UserRole {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  name        String // Role name, e.g., "admin", "user"
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name]) // Ensure a user cannot have the same role multiple times
  @@index([userId])
  @@map("user_roles")
}

model RefreshToken {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  jti           String    @unique
  tokenHash     String    @map("token_hash")
  deviceId      String?   @map("device_id")
  ipAddress     String?   @map("ip_address")
  userAgent     String?   @map("user_agent")
  expiresAt     DateTime  @map("expires_at")
  revokedAt     DateTime? @map("revoked_at")
  revokedReason String?   @map("revoked_reason")
  replacedByJti String?   @map("replaced_by_jti")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt])
  @@map("refresh_tokens")
}
